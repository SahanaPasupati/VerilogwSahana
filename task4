module task4(SW, LEDR, LEDG, HEX0, HEX1, HEX4, HEX6);
	input [8:0] SW;
	output [8:0] LEDR;
	output [4:0] LEDG;
	output [6:0] HEX0;
	output [6:0] HEX1;
	output [6:0] HEX4;
	output [6:0] HEX6;
	wire c1, c2, c3;
	
	
	// connecting the switches to their corresponding LEDR
	assign LEDR[0] = SW[0];
	assign LEDR[1] = SW[1];
	assign LEDR[2] = SW[2];
	assign LEDR[3] = SW[3];
	assign LEDR[4] = SW[4];
	assign LEDR[5] = SW[5];
	assign LEDR[6] = SW[6];
	assign LEDR[7] = SW[7];
	assign LEDR[8] = SW[8];


	// assigning input B to be shown on HEX4
	assign HEX4[0] = ~((SW[1] & ~SW[3] )  | ( ~SW[3] & ~SW[2] & ~SW[1] & ~SW[0] ) | (~SW[3] & SW[2] & SW[0]) | (~SW[1] & SW[3] & ~SW[2])); 
	assign HEX4[1] = ~((~SW[3] & ~SW[2])  | ( ~SW[1] & ~SW[0])| ( SW[3] & ~SW[2] )| ( SW[1] & SW[0] )); 
	assign HEX4[2] = ~((~SW[3] & ~SW[1] )  | ( ~SW[3] & SW[1] & SW[0] ) | (~SW[3] & SW[2] & SW[1] & ~SW[0]) | (SW[3] & ~SW[1] & ~SW[2])); 
	assign HEX4[3] = ~((~SW[3] & SW[1] & ~SW[2])  | ( ~SW[0] & ~SW[3] & SW[1] ) | (~SW[2] & ~SW[0] & ~SW[1] ) | (~SW[3] & SW[2] & ~SW[1] & SW[0])); 
	assign HEX4[4] = ~((~SW[3] & SW[1] & ~SW[0])  | ( ~SW[2] & ~SW[1] & ~SW[0] )); 
	assign HEX4[5] = ~((~SW[3] & ~SW[1] & ~SW[0])  | ( ~SW[3] & SW[2] & ~SW[1]) | (SW[3] & ~SW[2] & ~SW[1]) | (~SW[3] & SW[2] & SW[1] & ~SW[0])); 
	assign HEX4[6] = ~((~SW[3] & SW[2] & ~SW[1])  | ( SW[3] & ~SW[2] & ~SW[1] )| ( SW[1] & ~SW[3] & ~SW[2] ) | ( SW[1] & ~SW[0] ));	
	// if the input is more than 9 assign LEDG8
	assign LEDG[8] = (SW[3] & SW[2]) | (SW[1] & SW[3])
	

	// assigning input A to be shown on HEX6
	assign HEX6[0] = ~((SW[5] & ~SW[7] )  | ( ~SW[7] & ~SW[6] & ~SW[5] & ~SW[4] ) | (~SW[7] & SW[6] & SW[4]) | (~SW[5] & SW[7] & ~SW[6])); 
	assign HEX6[1] = ~((~SW[7] & ~SW[6])  | ( ~SW[5] & ~SW[4])| ( SW[7] & ~SW[6] )| ( SW[5] & SW[4] )); 
	assign HEX6[2] = ~((~SW[7] & ~SW[5] )  | ( ~SW[7] & SW[5] & SW[4] ) | (~SW[7] & SW[6] & SW[5] & ~SW[4]) | (SW[7] & ~SW[5] & ~SW[6])); 
	assign HEX6[3] = ~((~SW[7] & SW[5] & ~SW[6])  | ( ~SW[4] & ~SW[7] & SW[5] ) | (~SW[6] & ~SW[4] & ~SW[5] ) | (~SW[7] & SW[6] & ~SW[5] & SW[4])); 
	assign HEX6[4] = ~((~SW[7] & SW[5] & ~SW[4])  | ( ~SW[6] & ~SW[5] & ~SW[4] )); 
	assign HEX6[5] = ~((~SW[7] & ~SW[5] & ~SW[4])  | ( ~SW[7] & SW[6] & ~SW[5]) | (SW[7] & ~SW[6] & ~SW[5]) | (~SW[7] & SW[6] & SW[5] & ~SW[4])); 
	assign HEX6[6] = ~((~SW[7] & SW[6] & ~SW[5])  | ( SW[7] & ~SW[6] & ~SW[5] )| ( SW[5] & ~SW[7] & ~SW[6] ) | ( SW[5] & ~SW[4] ));
	// if the input is more than 9 assign LEDG8
	assign LEDG[8] = (SW[7] & SW[6]) | (SW[5] & SW[7])


	
	fullAdder U1(SW[4], SW[0], SW[8], LEDG[0], c1);
	fullAdder U2(SW[5], SW[1], c1, LEDG[1], c2);
	fullAdder U3(SW[6], SW[2], c2, LEDG[2], c3);
	fullAdder U4(SW[7], SW[3], c3, LEDG[3], LEDG[4]);
	
	// CODE TO COVERT FROM BINARY TO DECIMAL AND ASSIGN TO HEX0 AND HEX1 DISPLAYS
endmodule
